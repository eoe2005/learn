# 队列使用场景

## 异步



## 解耦

## 消峰





# 消息队列中间件的差异

| 特性       |    ActiveMQ    |  RabbitMQ  |      Kafka       | RocketMq |
| ---------- | :------------: | :--------: | :--------------: | :------: |
| 单机吞吐量 |      万级      |    万级    |      10万级      |   万级   |
| 消息延迟   |       -        |   微秒级   |      毫秒级      |    -     |
| 可用性     |   高（主从）   | 高（主从） | 非常高（分布式） |    高    |
| 消息重复   |       -        |   可控制   |  理论上会有重复  |    -     |
| 消息丢失   |       -        |     低     |  理论上不会丢失  |    -     |
| 多语言支持 | 支持，JAVA优先 |  语言无关  |  支持，JAVA优先  |   支持   |
| 新手上手   |                |            |                  |          |
|            |                |            |                  |          |
|            |                |            |                  |          |

 

# rabbitMQ介绍

```mermaid
graph LR
A[[生产者]] -->|发送消息|B
subgraph Broker [服务器]
	subgraph Vhost [虚拟机]
		B([交换机]) -->|转发到队列| C[消息队列1] & E[消息队列2]
	end
end
C --> D[[消费者]]

```

```mermaid
sequenceDiagram
participant publish as 生产者
participant server as 服务器
participant vhost as 虚拟机
participant exchange as 交换机
participant msgqueue as 消息队列

publish ->>+ server: 发送消息
server ->>+ vhost: 根据路径选择虚拟机
vhost ->>+ exchange: 选择交换机
exchange ->>+ msgqueue: 发送到消息队列
msgqueue ->> msgqueue: 保存消息
msgqueue -->>- exchange: 返回
exchange -->>- vhost:返回
vhost -->>- server: 返回结果
server -->>- publish: 发送成功
```

```mermaid
graph LR
A[[生产者 - direct]] -->|发送消息| B([交换机]) -->|保存消息| C[消息队列] -->|消费| CM([消费者])
A1[[生产者 - fanout]] -->|发送常规消息| B1([交换机 fanout]) -->|保存消息| C1[消息队列1] -->|消费| CM1([消费者])
B1([交换机 fanout]) -->|保存消息| D1[消息队列2]   -->|消费| CM12([消费者])
A2[[生产者 - topic]] -->|发送常规消息| B2([交换机 topic]) -->|*.rabbit| C2[消息队列1] -->|消费| CM2([消费者])
B2-->|*.*rabbit| D2[消息队列2] -->|消费| CM21([消费者])
```







# Kafka介绍

```scheme

```





# 总结





